/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  /*
  We want to override the default browser font-size, which is 16px,
  and also don't allow user to change manually this setting. There are people
  that increase fsize to see better. But we dont wanna that our root font size
  to be affected by user prefference. We do this by assigning a percentage value.
  100% = 16px. We want 10px. So, just multiply 10px by 100%, and devide the result
  by 16px (browsers default). This allows user change fsize and increasing all the
  measurement of the page.
  */
  font-size: 62.5%;
}

body {
  font-family: Lato, sans-serif;
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image:
    linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(85, 198, 122, 0.8)),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*clip-path: polygon(50% 0, 50% 0, 100% 100%, 0 100%); //triangle*/
  position: relative;
}

.logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.logo {
  height: 3.5rem;
}

.logo:hover {
  animation: rotate 2s linear infinite;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /*
  Corrects the shake in animation box. No one know why this shake happens.
  Backface-visibility: Determines if the back part of the element,
  when we transform it, is visible or hidden for the user. So imagine we have an element
  and we rotate it 180 degrees. Would be l√≥gical that we see the back part.
  But if we use backface-visibitity: hidden the part behind the element is hidden.*/
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

.heading-primary--main {
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /*animation-delay: 3s;
  animation-iteration-count: 3;*/
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
}

.heading-primary--subtitle {
  animation: moveInRight 1s ease-out;
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
}

.text-box {
  position: absolute;
  left: 50%;
  top: 40%;
  transform: translate(-50%, -50%);
  text-align: center;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0%);
  }
}

.btn:link,
.btn:visited {
  border-radius: 10rem;
  display: inline-block;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  position: relative;
  font-size: 1.6rem;
  /*
  There are 2 types of animations
  1. Transition property
  2. Transform
  We should set the transition on the initial state
  */
  transition: all .2s;
}
.btn:hover {
  transform: translateY(-0.3rem);
  /*box-shadow: x-direction y-direction blur color=rgba to specify opacity*/
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, .2); /*.2 = 20% opacity*/
}
.btn:active {
  transform: translateY(-0.1rem);
  /*When you click the button, want the shadow to be smaller
  and give impression button is closer to the page, so we decrease Y direction and make it
  less blured*/
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .2);
}
.btn::after {
  content: '';
  display: inline-block;
  height: 100%; /* 100% of the height of the button. after pseudo element is treated like a child element*/
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all .4s;
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
.btn-white {
  background-color: #fff;
  color: #777;
  margin-right: 20px;
}
.btn-white::after {
  background-color: #fff;
}
@keyframes moveInTop {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
.btn-animated {
  animation: moveInTop .5s ease-out .75s; /*.75 animation delay*/
  animation-fill-mode: backwards; /*automatically apply the styles of 0% keyframe before the animation starts*/
}
